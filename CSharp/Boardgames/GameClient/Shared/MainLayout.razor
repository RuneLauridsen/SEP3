@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.AuthService
@using global::Shared.AuthState
@using global::Shared.Data
@using Microsoft.AspNetCore.Mvc
@inherits LayoutComponentBase
@inject IAuthState authState;
@inject IGameService gameService;
@inject ILiveService liveService;
@inject NavigationManager navMgr;
@inject IAuthService AuthService;

<PageTitle>GameClient</PageTitle>


<div style="height: 100vh; overflow: hidden;">


    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">VIA Boardgame Club</a>
            <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                    aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
                <ul class="navbar-nav me-auto mb-2 mb-md-0">
                    

                    @if (accountId != 0)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                                <span class="oi oi-home" aria-hidden="true"></span> Home
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="creatematch">
                                <span class="oi oi-plus" aria-hidden="true"></span> Create match
                            </NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="scores">
                                <span class="oi oi-plus" aria-hidden="true"></span> Scores
                            </NavLink>
                        </li>

                        <li class="nav-item">
                            <NavLink class="nav-link" href="login" @onclick="LogOut" >
                                <span class="oi oi-account-logout" aria-hidden="true" ></span> Logout
                            </NavLink>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="login">
                                <span class="oi oi-account-login" aria-hidden="true"></span> Login
                            </NavLink>
                        </li>
                    }


                </ul>

                <form class="form-inline my-2 my-lg-0 d-flex align-items-center text-muted">
                    @if (accountId == 0) {
                        <span>Not logged in</span>
                    } else {
                        <a style="text-decoration: none; color: white;" href="/account/@accountId">
                            <span>@account.Username</span>
                            <span style="width: 20px"></span>
                            @if (imgSrc != "") {
                                <img class="rounded-circle border-0 " style="width: 50px; height: 50px;" src="@imgSrc">
                            }
                        </a>

                    }
                </form>
            </div>
        </div>
    </nav>

    <div class="page" style="height: 100%">

        @if (accountId ==0) {
            <main class="container">
                    <ChildContent>
                        <CascadingValue Value=UpdateStyle>
                            @Body
                        </CascadingValue>
                    </ChildContent>

            </main>
        } else{
            <main style="height: 100%;">
                <div class="container-fluid" style="height: 100%;">
                    <div class="row" style="height: 100%;">
                        <div class="col-10 p-5 pt-4" style="overflow: auto; height: 100%;">
                                <ChildContent>
                                    <CascadingValue Value=UpdateStyle>
                                        @Body
                                        <div style="height: 200px"></div> <!-- Empty filler -->
                                    </CascadingValue>
                                </ChildContent>

                        </div>
                        <div class="col-2 p-5 pt-4" style="background-color: #2c3034">
                            @if (accountId != 0) {
                                <h3 style="color: white">Users</h3>
                                <hr style="color: white"/>
                                @foreach (var a in allAccounts) {
                                    if (a.AccountId != accountId) {
                                        <p ><a style="text-decoration: none; color: white;" href="/account/@a.AccountId"> @a.Username</a></p>
                                    }

                                }
                            }
                        </div>
                    </div>
                </div>
            </main>
        }
    </div>
</div>

@code
{
    //nav
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    private string imgSrc = "";

    private List<Account> allAccounts = Empty.List<Account>();
    private Account account = Empty.Account();
    int accountId;
    private EventCallback UpdateStyle => EventCallback.Factory.Create(this, UpdateAccount);


    protected override async Task OnParametersSetAsync() {
        accountId = await authState.GetUserIdAsync();
        await UpdateAccount();

    }

    private void ToggleNavMenu()
    {

        collapseNavMenu = !collapseNavMenu;

    }

    private async Task UpdateAccount()
    {
        if (accountId != 0)
        {
            if (accountId != account.AccountId)
            {
                var req = new GetAccountRequest(accountId);
                var res = await gameService.GetAccountAsync(req);
                account = res?.account ?? Empty.Account();
            }

            if (!allAccounts.Any())
            {
                var req = new GetAccountsRequest();
                var res = await gameService.GetAccountsAsync(req);
                allAccounts = res.accounts;
            }

            imgSrc = @HtmlUtil.ToImgSrcString(account.ProfilePicture, account.ProfilePictureType);
        }


    }

    private async Task LogOut()
    {
        await AuthService.LogoutAsync();
        account = Empty.Account();
        await UpdateAccount();
    }
}
