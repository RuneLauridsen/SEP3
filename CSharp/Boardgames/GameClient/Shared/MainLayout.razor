@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.AuthService
@using global::Shared.AuthState
@using global::Shared.Data
@using Microsoft.AspNetCore.Mvc
@inherits LayoutComponentBase
@inject IAuthState authState;
@inject IGameService gameService;
@inject ILiveService liveService;
@inject ApplicationState applicationState;

<PageTitle>GameClient</PageTitle>


<!-- TODO(rune): Kan man slippe for all 100%'erne?   -->
<div style="height: 100vh; overflow: hidden;">

    <nav class="navbar navbar-expand-md navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="">VIA Boardgame Club</a>
            <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                    aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
                <ul class="navbar-nav me-auto mb-2 mb-md-0">
                    <li class="nav-item">
                        <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                            <span class="oi oi-home" aria-hidden="true"></span> Home
                        </NavLink>
                    </li>

                    <!--TODO slet login fra navbar når dev færdig-->

                    <li class="nav-item">
                        <NavLink class="nav-link" href="login">
                            <span class="oi oi-account-login" aria-hidden="true"></span> Login
                        </NavLink>
                    </li>

                    <li class="nav-item">
                        <NavLink class="nav-link" href="creatematch">
                            <span class="oi oi-plus" aria-hidden="true"></span> Create match
                        </NavLink>
                    </li>
                </ul>

                <form class="form-inline my-2 my-lg-0 d-flex align-items-center text-muted">
                    @if (!loggedIn) {
                        <span>Not logged in</span>
                    } else {
                        <span>@account.Username</span>
                        <span style="width: 20px"></span>
                        @if (imgSrc != "") {
                            <img class="img-thumbnail rounded-circle    " style="width: 50px; height: 50px;" src="@imgSrc">
                        }
                    }
                </form>
            </div>
        </div>
    </nav>

    <div class="page" style="height: 100%">

        @if (!loggedIn && account.AccountId ==0) {
            <main class="container">
                <ErrorBoundary>
                    <ChildContent>
                        <CascadingValue Value=UpdateStyle>
                            @Body
                        </CascadingValue>
                    </ChildContent>
                    <ErrorContent Context="ex">
                        <!-- TODO(rune): Måske kun developer mode? -->
                        <h1>@ex.Message</h1>
                        <p style="white-space: pre-wrap; font-family: monospace">@ex.ToString()</p>
                    </ErrorContent>
                </ErrorBoundary>
            </main>
        } else if (loggedIn){
            <main style="height: 100%;">
                <div class="container-fluid" style="height: 100%;">
                    <div class="row" style="height: 100%;">
                        <div class="col-10 p-5 pt-4" style="overflow: auto; height: 100%;">
                            <ErrorBoundary>
                                <ChildContent>
                                    <CascadingValue Value=UpdateStyle>
                                        @Body
                                    </CascadingValue>
                                </ChildContent>
                                <ErrorContent Context="ex">
                                    <!-- TODO(rune): Måske kun developer mode? -->
                                    <h1>@ex.Message</h1>
                                    <p style="white-space: pre-wrap; font-family: monospace">@ex.ToString()</p>
                                </ErrorContent>
                            </ErrorBoundary>
                        </div>
                        <div class="col-2 p-5 pt-4" style="background-color: #2c3034">
                            <h3 style="color: white">Users</h3>
                            <hr style="color: white"/>
                            @foreach (var a in allAccounts)
                            {
                                <!-- TODO(rune): Hvad skal den linke til? -->
                                <p ><a style="text-decoration: none; color: white;" href="/account/@a.AccountId"> @a.Username</a></p>
                            }
                        </div>
                    </div>
                </div>
            </main>
        }

    </div>
</div>

@code
{
    //nav
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    private string imgSrc = "";

    private List<Account> allAccounts = Empty.List<Account>();
    private Account account = Empty.Account();
    private EventCallback UpdateStyle => EventCallback.Factory.Create(this, UpdateAccount);
    private bool loggedIn;

    protected override async Task OnInitializedAsync() {
        applicationState.IsDirty = true;

        //TODO Not good at den skal hente accounts på refresh, men ellers sætter den listerne til tomme
        await UpdateAccount();
    }

    private void ToggleNavMenu() {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task UpdateAccount()
    {
        if (applicationState.IsDirty)
        {
            int accountId = await authState.GetUserIdAsync();
            loggedIn = accountId != 0;
            if (loggedIn) {
                {
                    var req = new GetAccountReq(accountId);
                    var res = await gameService.GetAccountAsync(req);
                    account = res?.account ?? Empty.Account();
                }

                {
                    var req = new GetAccountsReq();
                    var res = await gameService.GetAccountsAsync(req);
                    allAccounts = res.accounts;
                }
            }

            applicationState.IsDirty = false;
        }
    }
}
