@using GameClient.Services
@using GameClient.DTO
@using global::Shared
@inject IAuthService authService;
@inject IGameService gameService;
@inject ApplicationState applicationState;

<nav class="navbar navbar-expand-md navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">VIA Boardgame Club</a>
        <button class="navbar-toggler @NavButtonCssClass" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse"
                aria-controls="navbarCollapse" aria-label="Toggle navigation" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse @NavBarCssClass" id="navbarCollapse" @onclick="ToggleNavMenu">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                        <span class="oi oi-home" aria-hidden="true"></span> Home
                    </NavLink>
                </li>

                
                <li class="nav-item">
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Login
                    </NavLink>
                </li>

                <li class="nav-item">
                    <NavLink class="nav-link" href="creatematch">
                        <span class="oi oi-plus" aria-hidden="true"></span> Create match
                    </NavLink>
                </li>
            </ul>

            <form class="form-inline my-2 my-lg-0 d-flex align-items-center text-muted">
                @if (!loggedIn) {
                    <span>Not logged in</span>
                } else {
                    <span>@account.Username</span>
                    <span style="width: 20px"></span>
                    @if (imgSrc != "") {
                        <img class="img-thumbnail rounded-circle    " style="width: 50px; height: 50px;" src="@imgSrc">
                    }
                }
            </form>
        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;
    private string? NavBarCssClass => collapseNavMenu ? null : "show";
    private string? NavButtonCssClass => collapseNavMenu ? "collapsed" : null;
    private Account account = Empty.Account();
    int accountId;
    private string imgSrc = "";
    
    EventCallback UpdateStyle => EventCallback.Factory.Create(this, UpdateAlertStyle);
    bool loggedIn;

    private void ToggleNavMenu() {
        collapseNavMenu = !collapseNavMenu;
    }

    // TODO(rune): Første kan man bliver redirected til index efter login,
    protected override void OnInitialized() {
   
        loggedIn = applicationState.IsDirty;
    //TODO Not good at den skal hente accounts på refresh, men ellers sætter den listerne til tomme
            UpdateAlertStyle();
        
    }
    
    public void UpdateAlertStyle()
    {
        if (applicationState.IsDirty)
        {
    // TODO(rune): Måske gem brugerens eget Account object globalt,
            // så vi ikke skal hent den hele tiden.
            accountId = ParseUtil.ParseIntOrDefault(authService.GetClaims().GetOrDefault("userId", ""), 0);
            loggedIn = true;
            var req = new GetAccountReq(accountId);
            var res = gameService.GetAccount(req);
            account = res.account;
            imgSrc = HtmlUtil.ToImgSrcString(account.ProfilePicture, account.ProfilePictureType);
            
        }
        else
        {
            loggedIn = false;
        }
    }

}
