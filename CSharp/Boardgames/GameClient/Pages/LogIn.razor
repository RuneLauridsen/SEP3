@inject NavigationManager navMgr
@inject IAuthService authService
@inject ApplicationState applicationState

@page "/LogIn"
@using GameClient.Data
@using GameClient.Services
@using global::Shared.AuthService
@using global::Shared.Data

<style>
    .card {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        width: 300px;
        padding: 25px;
        text-align: center;
    }

    .loginbtn {
        background-color:#0dcaf0;
        border-radius: 5px;
        padding: 5px;
        padding-left: 10px;
        padding-right: 10px;
    }

    .loginbtn:hover{
        transform: scale(1.1);
        box-shadow: 0 2px 10px 2px #3f3f3f;
    }

    .field {
        margin: 0px;
        margin-top: 5px;
    }
</style>

<h3>Login</h3>


        <div class="card">
            <h3>Please login</h3>
            <p class="field"><label>User name:</label></p>
            <p class="field"><input type="text" @bind="userName"/></p>
            <p class="field"><label style="text-align: center">Password:</label></p>
            <p class="field"><input type="password" @bind="password"/></p>
            @if (!string.IsNullOrEmpty(errorLabel)) {
                <div class="field">
                    <label style="color: red">
                        @errorLabel
                    </label>
                </div>
            }
            <div class="field">
                <button class="loginbtn" @onclick="LoginAsync">Log in</button>
            </div>
        </div>
        <br/>
        <div>
            <h4>Don't have an account?</h4>
            <button class="loginbtn" @onclick="CreateUser">Register</button>
        </div>

@code {
    private string userName;
    private string password;
    private string errorLabel;

    [CascadingParameter]
    public EventCallback UpdateStyle { get; set; }

    private async Task LoginAsync() {
        errorLabel = "";

        bool loginSuccessful = await authService.LoginAsync(userName, password, false);
        if (loginSuccessful) {
            navMgr.NavigateTo("/");
            applicationState.IsDirty = true;
            await UpdateStyle.InvokeAsync();
        } else {
            errorLabel = "Invalid username or password";
        }
    }

    private void CreateUser() {
        navMgr.NavigateTo("/Register");
    }

}
