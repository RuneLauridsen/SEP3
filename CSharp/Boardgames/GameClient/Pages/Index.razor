@page "/"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.AuthService
@using global::Shared.AuthState
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject NavigationManager navMgr
@inject IAuthState authState

<style>
    .rejected {
        color: #cc9999;
    }

    .accepted {
       color: #99cc99;
    }

    .BoxHeader
    {
    padding: 0;
    }

    .InviteBox
    {
    border-style: solid;
    border-width: 2px;
    border-radius: 10px;
    border-color: black;
    margin: 15px;
    padding: 4px;
    word-wrap: break-word;
    }

    .Match
    {
    border-style: solid;
    border-width: 2px;
    border-radius: 10px;
    border-color: black;
    margin: 15px;
    padding: 4px;
    }
    .pending {

    }
</style>

@if (isLoggedIn != 0)
{
    @if (_pendingInvites.Any())
    {
        <h3>Pending invitations(@_pendingInvites.Count()):</h3>

        <div class="container">
            <div class="row">
                @{ int counter = 0;}
               @foreach (var p in _pendingInvites)
                       {
                           <div class="col-4 BoxHeader">
                               @{ bool isDisabled = p.Status != Participant.STATUS_PENDING; }
                               <div class="@GetStyleClass(p) InviteBox">
                                   <h3>Match id = @(p.MatchId)</h3>
                                   <p>Match owner @(JsonUtil.ToJson(p.Match.Owner))</p>
                                   <p>Invitation created on = @(p.CreatedOn)</p>
                                   <p>Match created on = @(p.Match.CreatedOn)</p>
                                   <p>
                                       <button @onclick="() => OnAcceptClicked(p)" disabled="@isDisabled">Accept</button>
                                       <button @onclick="() => OnRejectClicked(p)" disabled="@isDisabled">Reject</button>
                                       </p>
                                   </div>

                           </div>

                           counter++;
                            @if (counter % 3 == 0)
                           {
                               @:</div> <div class="row">
                           }
                       }
            </div>
        </div>

    }
    else
    {
        <h3>No pending game invitations </h3>
    }

    @if (_matches.Any())
    {
        <h3>Current games(@_matches.Count()):</h3>
        <div class="container">
            <div class="row">
                @{ int counter = 0;}
                @foreach (DTO.Match m in _matches)
                {
                    <div class="col-4 BoxHeader">
                        <div class="Match">
                            <h3><a href="match/@m.MatchId">@m.ToString()</a></h3>
                        </div>

                    </div>
                    counter++;
                    if (counter % 3 == 0)
                    {
                        @:</div> <div class="row">
                    }
                }
            </div>
        </div>
    }
    else
    {
        <h3>No current games </h3>
    }
}


@if (_errorReason != "") {
    <div class="alert alert-danger">@_errorReason</div>
}


@code {
    private string _errorReason = "";
    private IEnumerable<Participant> _pendingInvites = Enumerable.Empty<Participant>();
    private IEnumerable<DTO.Match> _matches = Empty.Enumerable<DTO.Match>();
    private int isLoggedIn;

    protected override async Task OnInitializedAsync() {
        await Refresh();
        await base.OnInitializedAsync();
    }

    private async Task Refresh() {
        isLoggedIn = await authState.GetUserIdAsync();
        if (isLoggedIn != 0) {
             _pendingInvites = (await GameService.GetPendingAsync(new GetPendingReq())).participants;
                    _matches = (await GameService.GetMyMatchesAsync(new GetMyMatchesRequest())).matches;
        } else {
            navMgr.NavigateTo("/login");
        }
    }

    private string GetStyleClass(Participant p) {
        return p.Status switch {
            Participant.STATUS_ACCEPTED => "accepted",
            Participant.STATUS_PENDING => "pending",
            Participant.STATUS_REJECTED => "rejected",
            _ => ""
        };
    }

    private async Task OnAcceptClicked(Participant participant) {
        await DecidePending(participant, Participant.STATUS_ACCEPTED);
    }

    private async Task OnRejectClicked(Participant participant) {
        await DecidePending(participant, Participant.STATUS_REJECTED);
    }

    private async Task DecidePending(Participant p, int status) {
        var req = new DecidePendingReq(p.MatchId, p.ParticipantId, status);
        var res = await GameService.DecidePendingAsync(req);
        _errorReason = res.errorReason;
        if (_errorReason == "") {
            p.Status = status;
        }
    }
}
