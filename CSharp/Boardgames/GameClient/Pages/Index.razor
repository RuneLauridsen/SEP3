@page "/"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject NavigationManager navMgr

<style>
    .rejected {
        color: #cc9999;
    }

    .accepted {
       color: #99cc99;
    }

    .pending {

    }
</style>

@if (_pendingInvites.Any())
{
    <h3>Pending invitations(@_pendingInvites.Count()):</h3>
    foreach (var p in _pendingInvites)
    {
        string styleClass = GetStyleClass(p);
        bool isDisabled = p.Status != Participant.STATUS_PENDING;

        <div class="@(GetStyleClass(p))">
            <h3>Match id = @(p.MatchId)</h3>
            <p>Match owner @(JsonUtil.ToJson(p.Match.Owner))</p>
            <p>Invitation created on = @(p.CreatedOn)</p>
            <p>Match created on = @(p.Match.CreatedOn)</p>
            <p>
                <button @onclick="() => OnAcceptClicked(p)" disabled="@isDisabled">Accept</button>
                <button @onclick="() => OnRejectClicked(p)" disabled="@isDisabled">Reject</button>
            </p>
        </div>
    }
}
else
{
    <h3>No pending game invitations </h3>
}

@if (_matches.Any())
{
    <h3>Current games(@_matches.Count()):</h3>
    @foreach (var m in _matches) {
        <h3><a href="mymatches/@m.MatchId">ShowMatch id = @(m.MatchId)</a></h3>
    }
}
else
{
    <h3>No current games </h3>
}



@if (_errorReason != "") {
    <div class="alert alert-danger">@_errorReason</div>
}

@code{
    private string _errorReason = "";
    private IEnumerable<Participant> _pendingInvites = Enumerable.Empty<Participant>();
    private IEnumerable<Match> _matches = Empty.Enumerable<Match>();
    protected override Task OnInitializedAsync() {
        Refresh();
        return base.OnInitializedAsync();
    }
    
    private void Refresh() {
        _pendingInvites = GameService.GetPending(new GetPendingReq()).participants;
        _matches = GameService.GetMyMatches(new GetMyMatchesRequest()).matches;
    }
   
    private string GetStyleClass(Participant p) {
        return p.Status switch {
            Participant.STATUS_ACCEPTED => "accepted",
            Participant.STATUS_PENDING => "pending",
            Participant.STATUS_REJECTED => "rejected",
            _ => ""

            };
    }
    
    private void OnAcceptClicked(Participant participant) {
        DecidePending(participant, Participant.STATUS_ACCEPTED);
    }

    private void OnRejectClicked(Participant participant) {
        DecidePending(participant, Participant.STATUS_REJECTED);
    }
    
    private void DecidePending(Participant p, int status) {
        var req = new DecidePendingReq(p.MatchId, p.ParticipantId, Participant.STATUS_ACCEPTED);
        var res = GameService.DecidePending(req);
        _errorReason = res.errorReason;
        if (_errorReason == "") {
            p.Status = status;
        }
    }

}