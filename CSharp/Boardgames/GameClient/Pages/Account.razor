@page "/account/{accountid}"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject IAuthService AuthService;
@inject NavigationManager navMgr

<PageTitle>@_account.Username</PageTitle>


@if (!_isEditing) {
    <h1>@_account.Username</h1>
    <!-- TODO(rune): Bedre GUI -->
    <div class="container">
        <div class="row">
            <div class="col-4">
                <!-- TODO(rune): Responsive  -->
                <p>AccountId: @_account.AccountId</p>
                <p>Username: @_account.Username</p>
                <p>FirstName: @_account.FirstName</p>
                <p>LastName: @_account.LastName</p>
                <p>Email: @_account.Email</p>
                <p>Description: @_account.Description</p>
                <p>Status: @_account.StatusName()</p>
                <p>RegisterDateTime: @_account.RegisterDateTime</p>
                <p>CreatedOn: @_account.CreatedOn</p>
                <p><a href=@("/account/" + _account.AccountId + "/scores")>Show match history</a></p>
            </div>
            <div class="col-4">
                @if (_imgSrc != "") {
                    <img src="@_imgSrc" alt="Profile Picture"/>
                }
            </div>
        </div>
    </div>

    <button @onclick=OnEditClicked>Edit</button>
} else {
    <h1>Edit profile</h1>

    @if (_errorReason != "") {
        <div class="alert alert-danger">@_errorReason</div>
    }

    <p>
        <label>Username</label>
        <input type="text" class="form-control" @bind="@_account.Username">
    </p>
    <p>
        <label>First name</label>
        <input type="text" class="form-control" @bind="@_account.FirstName">
    </p>
    <p>
        <label>Last name</label>
        <input type="text" class="form-control" @bind="@_account.LastName">
    </p>
    <p>
        <label>Email</label>
        <input type="text" class="form-control" @bind="@_account.Email">
    </p>
    <p>
        <label>Description</label>
        <textarea class="form-control" @bind="@_account.Description">
        </textarea>
    </p>
    <p>
        <label>Profilbillede.</label>
        <InputFile OnChange="@LoadFile"/>
    </p>


    <button @onclick=OnSaveClicked>Save</button>
}

@code {

    [Parameter]
    public string AccountId { get; set; } = "";

    private DTO.Account _account = Empty.Account();
    private bool _isEditing = false;
    private IBrowserFile? _uploadedProfilePicture = null;
    private string _imgSrc = "";
    private string _errorReason = "";
    private bool _isOwnProfile = false;

    protected override Task OnInitializedAsync() {
        int claimAccountId = ParseUtil.ParseIntOrDefault(AuthService.GetClaims().GetOrDefault("userId", ""));
        int routeAccountId = ParseUtil.ParseIntOrDefault(AccountId);
        if (routeAccountId != 0) {
            _isOwnProfile = routeAccountId == claimAccountId;
            var req = new GetAccountReq(routeAccountId);
            var res = GameService.GetAccount(req);
            _account = res.account;
            _imgSrc = HtmlUtil.ToImgSrcString(_account.ProfilePicture, _account.ProfilePictureType);
        }

        return Task.CompletedTask;
    }

    private void OnEditClicked() {
        _isEditing = true;
    }

    private async Task OnSaveClicked() {
        if (_uploadedProfilePicture == null) {
            _account.ProfilePicture = null;
        } else {
    // NOTE(rune):
    // Lidt spild at læse det hele ind i en temp buffers, når det alligevel bare
    // bliver proxyet til socket, men vi har få brugere so who cares ¯\_(ツ)_/¯.
    // Der er alligevel _mange_ andre problemer at løse, hvis vi skulle lave et
    // effektivt system.
            await using var stream = _uploadedProfilePicture.OpenReadStream();
            var bytes = await ReadAllBytesAsync(stream);
            var base64 = Convert.ToBase64String(bytes);
            _account.ProfilePicture = base64;
            _account.ProfilePictureType = _uploadedProfilePicture.ContentType;
        }

        var req = new UpdateAccountReq(_account);
        var res = GameService.UpdateAccount(req);

    // TODO(rune): Show errorReason
        _errorReason = res.errorReason;
        if (_errorReason == "") {
            navMgr.ReloadCurrentPage();
        }
    }

    private void LoadFile(InputFileChangeEventArgs obj) {
        _uploadedProfilePicture = obj.File;
    }

    // NOTE(rune): https://stackoverflow.com/a/6586039
    private static async Task<byte[]> ReadAllBytesAsync(Stream input) {
        using MemoryStream ms = new MemoryStream();
        await input.CopyToAsync(ms);
        return ms.ToArray();
    }

}
