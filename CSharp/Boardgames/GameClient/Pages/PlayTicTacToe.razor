@page "/match/{matchid}/play/tictactoe"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Games
@using GameClient.Services
@using global::Shared
@using global::Shared.AuthState
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject IAuthState AuthState
@inject ILiveService LiveService
@inject NavigationManager navMgr

<PageTitle>Play @_match.ToString()</PageTitle>

<h1>Play @_match.ToString()</h1>
<p><a href="/match/@_matchId">View match</a></p>

<!-- NOTE(rune): https://www.w3schools.com/css/css_grid.asp -->
<style>
    .grid-container {
        display: grid;
        grid-template-columns: auto auto auto;
        padding: 10px;
        width: 300px;
        height: 300px;
    }
    .grid-item {
        width: 100px;
        height: 100px;
        line-height: 100px;
        font-size: 30px;
        text-align: center;
        border: 1px black solid;
    }
</style>

@if (_data != null) {
    <p>
        <span>@(_match.NextAccountId == _data.AccountIdO ? "➡" : " ")</span>
        <span>@AccountById(_data.AccountIdO).Username</span>
        <span>- O - Remaining pieces: @_data.RemainingO</span>
    </p>

    <p>
        <span>@(_match.NextAccountId == _data.AccountIdX ? "➡" : " ")</span>
        <span>@AccountById(_data.AccountIdX).Username</span>
        <span>- X - Remaining pieces: @_data.RemainingX</span>
    </p>

        <div class="grid-container">
            @for (var i = 0; i < 9; i++) {
                int squareIndex = i;
                int squareBit = 1 << squareIndex;
                <div @onclick="() => OnSquaredClicked(squareIndex)"
                     class="grid-item"
                     style="@(i == takeFromIndex ? "background-color: cyan;" : "")">
                    @if ((_data.PiecesO & squareBit) != 0) { <span>O</span> }
                    @if ((_data.PiecesX & squareBit) != 0) { <span>X</span> }
                </div>
            }
        </div>
}

<br/>

@if (_invalidMoveText != "") {
    <div class="alert alert-danger">@_invalidMoveText</div>
}

@if (_winnerText != "") {
    <div class="alert alert-success">@_winnerText</div>
}

@code {

    [Parameter]
    public string MatchId { get; set; } = "";

    private TicTacToeData? _data;
    private int _matchId = 0;
    private DTO.Match _match = Empty.Match();
    private string _invalidMoveText = "";
    private string _winnerText = "";

    private int remaining = 0;
    private int takeFromIndex = -1;

    private List<DTO.Account> _accounts = Empty.List<DTO.Account>();

    protected override async Task OnInitializedAsync() {
        LiveService.MatchUpdated += (s, e) => {
            if (e == _matchId) {
                InvokeAsync(RefreshAsync);
            }
        };

        {
            GetAccountsRequest request = new();
            GetAccountsResponse response = await GameService.GetAccountsAsync(request);
            _accounts = response.accounts;
        }

        await RefreshAsync();
        await base.OnInitializedAsync();
    }

    private async Task RefreshAsync() {
        _matchId = ParseUtil.ParseIntOrDefault(MatchId, 0);
        if (_matchId != 0) {
            var req = new GetMatchRequest(_matchId);
            var res = await GameService.GetMatchAsync(req);
            _match = res.match;

            _data = JsonUtil.FromJson<TicTacToeData>(_match.Data);

            if (_match.NextAccountId == _data.AccountIdO) remaining = _data.RemainingO;
            if (_match.NextAccountId == _data.AccountIdX) remaining = _data.RemainingX;
        }

        takeFromIndex = -1;
        StateHasChanged();
    }

    private async Task OnSquaredClicked(int squareIndex) {
        if (takeFromIndex == squareIndex) {
            takeFromIndex = -1;
            return;
        }

        if (remaining == 0 && takeFromIndex == -1) {
            takeFromIndex = squareIndex;
            return;
        }

        var move = new TicTacToeMove { PlaceOnIndex = squareIndex, TakeFromIndex = takeFromIndex };
        var moveJson = JsonUtil.ToJson(move);

        var req = new MoveRequest(_matchId, moveJson);
        var res = await GameService.MoveAsync(req);

        _invalidMoveText = res.result.InvalidMoveText;
        _winnerText = res.result.FinishedText;

        await RefreshAsync();
    }

    private DTO.Account AccountById(int accountId) {
        DTO.Account ret = _accounts.FirstOrDefault(x => x.AccountId == accountId, Empty.Account());
        return ret;
    }
}
