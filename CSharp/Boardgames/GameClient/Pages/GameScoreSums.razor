@page "/game/{gameId}/scores"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject IAuthService AuthService;
@inject NavigationManager navMgr

<PageTitle>Score</PageTitle>

<h1>@_game.Name</h1>

<table class="table">
    <thead>
    <tr>
        <th scope="col">#</th>
        <th scope="col">Bruger</th>
        <th scope="col">Total score</th>
        <th scope="col">Antal matches</th>
    </tr>
    </thead>
    <tbody>
    @for (var i = 0; i < _scoreSums.Count; i++) {
        var sc = _scoreSums[i];
        <tr>
            <th scope="row">@i</th>
            <td>
                <a href="@("account/" + sc.AccountId)">@sc.AccountName</a>
            </td>
            <td>@sc.Score</td>
            <td>@sc.Count</td>
        </tr>
        i++;
    }
    </tbody>
</table>

@code {

    [Parameter]
    public string GameId { get; set; } = "";

    private Game _game = Empty.Game();
    private List<ScoreSum> _scoreSums = Empty.List<ScoreSum>();

    protected override async Task OnInitializedAsync() {
        await Task.Run(() => { // TODO(rune): Bedre async
            List<Game> games;
            {
                GetGamesRequest req = new();
                GetGamesResponse res = GameService.GetGames(req);
                games = res.games;
            }

            int gameId = ParseUtil.ParseIntOrDefault(GameId, 0);
            if (gameId != 0) {
                _game = games.FirstOrDefault(x => x.GameId == gameId, Empty.Game());

                GetScoreSumsRequest req = new(gameId);
                GetScoreSumsResponse res = GameService.GetScoreSums(req);
                _scoreSums = res.sums;
            }
        });
    }

}
