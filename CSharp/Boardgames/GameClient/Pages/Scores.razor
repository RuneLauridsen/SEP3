@page "/scores"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.AuthService
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject IAuthService AuthService;
@inject NavigationManager navMgr

<PageTitle>Score</PageTitle>

<h1>@_selectedGame.Name</h1>

<p>
    Choose game
    <select @onchange="OnSelectedGameChanged">
        @foreach (var g in _games) {
            <option value="@g.GameId">@g.Name</option>
        }
    </select>
</p>

<table class="table">
    <thead>
    <tr>
        <th scope="col">#</th>
        <th scope="col">Bruger</th>
        <th scope="col">Total score</th>
        <th scope="col">Number of matches</th>
    </tr>
    </thead>
    <tbody>
    @{ var i = 1;}
    @foreach(var sc in _scoreSums) {
        <tr>
            <th scope="row">@i</th>
            <td>
                <a href="@("account/" + sc.AccountId)">@sc.AccountName</a>
            </td>
            <td>@sc.Score</td>
            <td>@sc.Count</td>
        </tr>
        i++;
    }
    </tbody>
</table>

@code {
    private int _selectedGameId = 0;
    private Game _selectedGame = Empty.Game();
    private List<Game> _games = Empty.List<Game>();
    private List<ScoreSum> _scoreSums = Empty.List<ScoreSum>();

    protected override async Task OnInitializedAsync() {
        await Task.Run(async () => { // TODO(rune): Bedre async
            GetGamesRequest req = new();
            GetGamesResponse res = await GameService.GetGamesAsync(req);
            _games = res.games;

            await ChangeToGame(1);
        });
    }

    private async Task ChangeToGame(int gameId) {
        _selectedGameId = gameId;

        _scoreSums = Empty.List<ScoreSum>();
        _selectedGame = _games.FirstOrDefault(x => x.GameId == gameId, Empty.Game());
        if (_selectedGameId != 0) {
            GetScoreSumsRequest req = new(_selectedGameId);
            GetScoreSumsResponse res = await GameService.GetScoreSumsAsync(req);
            _scoreSums = res.sums;
        }
    }

    private async Task OnSelectedGameChanged(ChangeEventArgs e) {
        int valueAsInt = ParseUtil.ParseIntOrDefault(e.Value);
        await ChangeToGame(valueAsInt);
    }
}
