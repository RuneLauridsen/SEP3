@page "/account/{accountid}/scores"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.AuthService
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject IAuthService AuthService;
@inject NavigationManager navMgr

<PageTitle>History</PageTitle>

<h1>@_account.Username</h1>

<table class="table">
    <thead>
    <tr>
        <th scope="col">Game</th>
        <th scope="col">Score</th>
        <th scope="col">Finished on</th>
        <th scope="col"></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var sc in _scores) {
        <tr>
            <td>@sc.GameName</td>
            <td>@sc.Score</td>
            <td>@sc.MatchFinishedOn</td>
            <td>
                <a href="@("match/" + sc.MatchId)">Show match</a>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {

    [Parameter]
    public string AccountId { get; set; } = "";

    private DTO.Account _account = Empty.Account();
    private int _accountId = 0;
    private List<FinishedMatchScore> _scores = Empty.List<FinishedMatchScore>();

    protected override async Task OnInitializedAsync() {
            _accountId = ParseUtil.ParseIntOrDefault(AccountId);
            if (_accountId != 0) {
                {
                    GetAccountRequest request = new(_accountId);
                    GetAccountResponse response = await GameService.GetAccountAsync(request);
                    _account = response.account;
                }

                {
                    GetMatchHistoryRequest req = new(_accountId);
                    GetMatchHistoryResponse res = await GameService.GetMatchHistoryAsync(req);
                    _scores = res.scores;
                }
            }
    }

}
