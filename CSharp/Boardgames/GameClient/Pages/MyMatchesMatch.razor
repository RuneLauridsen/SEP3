<!-- TODO(rune): BEDRE NAVN END MyMatchesMatch!!! JEG SKAMMER MIG. -->
<!-- TODO(rune): BEDRE NAVN END MyMatchesMatch!!! JEG SKAMMER MIG. -->
<!-- TODO(rune): BEDRE NAVN END MyMatchesMatch!!! JEG SKAMMER MIG. -->
<!-- TODO(rune): BEDRE NAVN END MyMatchesMatch!!! JEG SKAMMER MIG. -->
<!-- TODO(rune): BEDRE NAVN END MyMatchesMatch!!! JEG SKAMMER MIG. -->
<!-- TODO(rune): BEDRE NAVN END MyMatchesMatch!!! JEG SKAMMER MIG. -->
<!-- TODO(rune): BEDRE NAVN END MyMatchesMatch!!! JEG SKAMMER MIG. -->
<!-- TODO(rune): BEDRE NAVN END MyMatchesMatch!!! JEG SKAMMER MIG. -->

@page "/mymatches/{matchid}"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject NavigationManager navMgr

<PageTitle>Current matches</PageTitle>

<h1>Match</h1>

<h3>Match id = @(_matchId)</h3>
<p>State: @(_match.Data)</p>
<p><a href="playtictactoe/@MatchId">Play</a></p>

<h3>Participants</h3>
@foreach (var p in _match.Participants) {
    <p>🧍 @(p.Account.Username)</p>
}

@if (_errorReason != "") {
    <div class="alert alert-danger">@_errorReason</div>
}

@code {

    [Parameter]
    public string MatchId { get; set; } = "";

    private int _matchId = 0;
    private Match _match = Empty.Match();
    private string _errorReason = "";

    protected override Task OnInitializedAsync() {
        Refresh();
        return base.OnInitializedAsync();
    }

    private void Refresh() {
        _matchId = ParseUtil.ParseIntOrDefault(MatchId, 0);
        if (_matchId != 0) {
            var req = new GetMatchReq(_matchId);
            var res = GameService.GetMatch(req);
            _match = res.match;
        }
    }
}
