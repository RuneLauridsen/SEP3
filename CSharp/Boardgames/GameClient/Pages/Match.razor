@page "/match/{matchid}"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject NavigationManager navMgr

<PageTitle>Create match participants</PageTitle>

<h1>Not already invited</h1>

@foreach (var a in _allAccounts.Where(NotAlreadyInvited)) {
    <p>
        <button @onclick="() => OnInviteClicked(a)">Invite</button>
        <span>@(a.Username)</span>
    </p>
}

<h1>Already invited</h1>

@foreach (var a in _allAccounts.Where(IsAlreadyInvited)) {
    <p>
        <span>@(a.Username)</span>
    </p>
}

@if (_errorReason != "") {
    <div class="alert alert-danger">@_errorReason</div>
}

@code {

    [Parameter]
    public string MatchId { get; set; } = "";

    private int _matchId = 0;
    private DTO.Match _match = Empty.Match();

    private string _errorReason = "";

    private IEnumerable<DTO.Account> _allAccounts = Enumerable.Empty<DTO.Account>();

    protected override void OnInitialized() {
        Refresh();
        base.OnInitialized();
    }

    private bool IsAlreadyInvited(DTO.Account a) {
        bool ret = _match.Participants.Any(x => x.AccountId == a.AccountId);
        return ret;
    }

    private bool NotAlreadyInvited(DTO.Account a) {
        return !IsAlreadyInvited(a);
    }

    private void Refresh() {
        _matchId = ParseUtil.ParseIntOrDefault(MatchId, 0);
        if (_matchId != 0) {
            var req = new GetMatchReq(_matchId);
            var res = GameService.GetMatch(req);
            _match = res.match;
        }

        {
            var req = new GetAccountsReq();
            var res = GameService.GetAccounts(req);
            _allAccounts = res.accounts;
        }
    }

    private void OnInviteClicked(DTO.Account accountToInvite) {
        if (_matchId != 0) {
            var req = new AddParticipantReq(_matchId, accountToInvite.AccountId);
            var res = GameService.AddParticipant(req);
            _errorReason = res.errorReason;
            if (_errorReason == "") {
                Refresh();
            }
        }
    }
}
