@page "/match/{matchid}"
@using GameClient.Data
@using GameClient.DTO
@using GameClient.Services
@using global::Shared
@using global::Shared.Data
@using static global::Shared.Data.Messages
@inject IGameService GameService
@inject IAuthService AuthService
@inject NavigationManager navMgr

<PageTitle>@_match.ToString()</PageTitle>

<h1>@_match.ToString()</h1>
<p>Game: @_match.Game.Name</p>
<p>Owner: <a href="/account/@_owner.AccountId">@_owner.Username</a></p>

@if (_match.Status != DTO.Match.STATUS_PENDING) {
    <p>Started on: @_match.</p>
    <p>Last move on: @_match.LastMoveOn</p>
    <p>Next turn:
        @{ var next = AccountFromId(_match.NextAccountId ?? 0);}
        <a href="/account/@next.AccountId">@next.Username</a>
    </p>
}

@if (_match.Status == DTO.Match.STATUS_ONGOING) {
    <a href="/match/@MatchId/play/@_match.Game.Name">
        <button type="button" class="btn btn-primary mb-5">
            Play
        </button>
    </a>
}

@if (_match.LastMoveOn.HasValue &&
     (DateTime.Now - _match.LastMoveOn.Value).TotalHours > 24) {
      <button type="button" class="btn btn-primary mb-5" @onclick="OnImpatientWinClicked">
          Impatient win
      </button>
}

@if (_errorReason != "") {
    <div class="alert alert-warning">@_errorReason</div>
}

<h2>Participants</h2>
@foreach (var p in _match.Participants.OrderBy(x => x.Status == Participant.STATUS_REJECTED)) {
    var a = AccountFromParticipant(p);
    <p>
        <a href="/account/@a.AccountId">
            <span>🧍 @(a.Username)</span>
        </a>

        @switch (p.Status) {
            case Participant.STATUS_PENDING:
                <span class="text-muted"> (Pending)</span>
                break;
            case Participant.STATUS_REJECTED:
                <span class="text-danger"> (Rejected)</span>
                break;
            case Participant.STATUS_ACCEPTED:
                <span class="text-success"> (Accepted)</span>
                break;
        }
        <br/>
        <small>Invited on: @(p.CreatedOn)</small>
    </p>
}

<!-- Kun owner kan invitere folk -->
@if (_isOwner) {
    <h1>Invite</h1>
    @foreach (var a in _allAccounts.Where(NotAlreadyInvited)) {
        <p>
            <button @onclick="() => OnInviteClicked(a)">Invite</button>
            <span>@(a.Username)</span>
        </p>
    }
}

@code {

    [Parameter]
    public string MatchId { get; set; } = "";

    private int _matchId = 0;
    private DTO.Match _match = Empty.Match();
    private bool _isOwner = false;
    private int _accountId = 0;
    private DTO.Account _owner = Empty.Account();

    private string _errorReason = "";

    private IEnumerable<DTO.Account> _allAccounts = Enumerable.Empty<DTO.Account>();

    protected override void OnInitialized() {
        Refresh();
        base.OnInitialized();
    }

    private DTO.Account AccountFromParticipant(Participant p) {
        return AccountFromId(p.AccountId);
    }

    private DTO.Account AccountFromId(int accountId) {
        return _allAccounts.FirstOrDefault(x => x.AccountId == accountId, Empty.Account());
    }

    private bool NotAlreadyInvited(DTO.Account a) {
        bool ret = _match.Participants.All(x => x.AccountId != a.AccountId);
        return ret;
    }

    private void Refresh() {
        _matchId = ParseUtil.ParseIntOrDefault(MatchId, 0);
        if (_matchId != 0) {
            var req = new GetMatchReq(_matchId);
            var res = GameService.GetMatch(req);
            _match = res.match;
        }

        {
            var req = new GetAccountsReq();
            var res = GameService.GetAccounts(req);
            _allAccounts = res.accounts;
        }

        {
            var accountIdAsString = AuthService.GetClaims().GetOrDefault("userId", "");
            _accountId = ParseUtil.ParseIntOrDefault(accountIdAsString);
            _isOwner = _match.OwnerId == _accountId;
            _owner = _allAccounts.FirstOrDefault(x => x.AccountId == _match.OwnerId, Empty.Account());
        }
    }

    private void OnInviteClicked(DTO.Account accountToInvite) {
        if (_matchId != 0) {
            var req = new AddParticipantReq(_matchId, accountToInvite.AccountId);
            var res = GameService.AddParticipant(req);
            _errorReason = res.errorReason;
            if (_errorReason == "") {
                Refresh();
            }
        }
    }

    private void OnImpatientWinClicked() {
        if (_matchId != 0) {
            var req = new ImpatientWinRequest(_matchId);
            var res = GameService.ImpatientWin(req);
            _errorReason = res.errorReason;
            if (_errorReason == "") {
                Refresh();
            }
        }
    }
}
