@page "/"
@using GameClient.DTO
@using AdminClient.Services
@using global::Shared
@using global::Shared.AuthService
@using global::Shared.AuthState
@inject IAdminService adminService
@inject NavigationManager navMgr
@inject IAuthState authState;


<style>
table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
}

td, th {
  border: 1px solid #aaaaaa;
  text-align: left;
  padding: 8px;
}

tr:nth-child(even) {
  background-color: #dddddd;
}
</style>

@if (isLoggedIn == 0)
{
    navMgr.NavigateTo("/login");
}
else
{


@if (numberOfApplicants > 0)
{
  <h2>you have @numberOfApplicants applicants for registration</h2>
  <button @onclick="GoToRegistrations">click here to see applicants</button>
}
else
{
  <h2>you have no applicants for registration</h2>
}

  <h2>Accounts:</h2>

@if (accounts.Any())
{
  <table>
    <tr>
      <th>Username</th>
      <th>Name</th>
      <th>Email</th>
    </tr>

    @foreach (Account account in accounts)
    {
      <tr @onclick="() => AccountClick(account)">
        <td>@(account.Username)</td>
        <td>@(account.FirstName) @(account.LastName)</td>
        <td>@(account.Email)</td>
      </tr>
    }

  </table>
}
else
{
  <p>No accounts to show</p>
}
}



@code{
  int numberOfApplicants;
  List<Account> accounts = new List<Account>();
  int isLoggedIn;

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();
    isLoggedIn = await authState.GetUserIdAsync();
    if (isLoggedIn != 0) {
      var applicants = await adminService.GetUsersWaitingForApprovalAsync();
      numberOfApplicants = applicants.Count;
      accounts.Clear();
      accounts.AddRange(await adminService.GetApprovedUsersAsync());
    }
  }

  private void GoToRegistrations()
  {
    navMgr.NavigateTo("/ConfirmRegistrations");
  }

  private void AccountClick(Account account)
  {
    navMgr.NavigateTo("/MemberProfile/" + account.AccountId);
  }

}
